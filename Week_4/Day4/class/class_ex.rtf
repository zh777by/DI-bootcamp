{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red22\green21\blue22;\red22\green21\blue22;}
{\*\expandedcolortbl;;\cssrgb\c11373\c10980\c11373;\cssrgb\c11373\c10980\c11373\c3922;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Managing a Simple User Database\
\
# Scenario:\
# You're building a basic user management system that interacts with a PostgreSQL database. \
# Users should be able to:\
\
# View all existing users.\
# Add a new user.\
# Update a user's information.\
# Delete a user.\
\
# Tasks:\
# Database Setup:\
\
# Create a PostgreSQL database named user_management.\
# Inside the database, create a table named users with columns: \
# id (integer, primary key), username (varchar), email (varchar), and age (integer).\
\
# Python Script:\
\
# Write a Python script that connects to the user_management database.\
# Implement functions to perform the following operations:\
# View all users from the users table.\
# Add a new user to the users table.\
# Update a user's information based on their id.\
# Delete a user from the users table based on their id.\
\
# User Interaction:\
\
# Create a simple command-line interface (CLI) to interact with your Python functions.\
# The CLI should provide options to view, add, update, or delete users, \
# and take appropriate inputs from the user to perform these actions.\
\
# Testing:\
\
# Test your Python script by adding users, viewing all users, \
# updating user information, and deleting users.\
}